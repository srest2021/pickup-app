create extension if not exists "http" with schema "extensions";


create table "public"."games" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "time" timestamp with time zone not null,
    "date" date not null,
    "sport" text not null,
    "address" text not null,
    "organizer_id" uuid not null,
    "max_players" bigint,
    "current_players" bigint default '1'::bigint,
    "skill_level" smallint
);


alter table "public"."games" enable row level security;

create table "public"."joined_game" (
    "id" bigint generated by default as identity not null,
    "game_id" bigint not null,
    "player_id" uuid not null default auth.uid()
);


alter table "public"."joined_game" enable row level security;

create table "public"."profiles" (
    "id" uuid not null,
    "updated_at" timestamp with time zone,
    "display_name" text,
    "avatar_url" text,
    "bio" text,
    "username" text,
    "joined_games" bigint[],
    "created_games" bigint[]
);


alter table "public"."profiles" enable row level security;

create table "public"."sports" (
    "id" uuid not null,
    "name" text,
    "skill_level" integer,
    "user_id" uuid not null
);


alter table "public"."sports" enable row level security;

CREATE UNIQUE INDEX games_pkey ON public.games USING btree (id);

CREATE UNIQUE INDEX joined_game_pkey ON public.joined_game USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX profiles_username_key ON public.profiles USING btree (username);

CREATE UNIQUE INDEX sports_pkey ON public.sports USING btree (id);

alter table "public"."games" add constraint "games_pkey" PRIMARY KEY using index "games_pkey";

alter table "public"."joined_game" add constraint "joined_game_pkey" PRIMARY KEY using index "joined_game_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."sports" add constraint "sports_pkey" PRIMARY KEY using index "sports_pkey";

alter table "public"."games" add constraint "public_games_organizer_fkey" FOREIGN KEY (organizer_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."games" validate constraint "public_games_organizer_fkey";

alter table "public"."joined_game" add constraint "public_joined_game_game_id_fkey" FOREIGN KEY (game_id) REFERENCES games(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."joined_game" validate constraint "public_joined_game_game_id_fkey";

alter table "public"."profiles" add constraint "profiles_bio_check" CHECK ((length(bio) < 500)) not valid;

alter table "public"."profiles" validate constraint "profiles_bio_check";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

alter table "public"."profiles" add constraint "profiles_username_check" CHECK ((length(username) < 20)) not valid;

alter table "public"."profiles" validate constraint "profiles_username_check";

alter table "public"."profiles" add constraint "profiles_username_key" UNIQUE using index "profiles_username_key";

alter table "public"."sports" add constraint "skill_level_range" CHECK (((skill_level >= 0) AND (skill_level <= 2))) not valid;

alter table "public"."sports" validate constraint "skill_level_range";

alter table "public"."sports" add constraint "sports_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."sports" validate constraint "sports_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.delete_avatar(avatar_url text, OUT status integer, OUT content text)
 RETURNS record
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  select
      into status, content
           result.status, result.content
      from public.delete_storage_object('avatars', avatar_url) as result;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.delete_old_avatar()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
  status int;
  content text;
  avatar_name text;
begin
  if coalesce(old.avatar_url, '') <> ''
      and (tg_op = 'DELETE' or (old.avatar_url <> coalesce(new.avatar_url, ''))) then
    -- extract avatar name
    avatar_name := old.avatar_url;
    select
      into status, content
      result.status, result.content
      from public.delete_avatar(avatar_name) as result;
    if status <> 200 then
      raise warning 'Could not delete avatar: % %', status, content;
    end if;
  end if;
  if tg_op = 'DELETE' then
    return old;
  end if;
  return new;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.delete_old_profile()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  delete from public.profiles where id = old.id;
  return old;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.delete_storage_object(bucket text, object text, OUT status integer, OUT content text)
 RETURNS record
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
  project_url text := '<YOURPROJECTURL>';
  service_role_key text := '<YOURSERVICEROLEKEY>'; --  full access needed
  url text := project_url||'/storage/v1/object/'||bucket||'/'||object;
begin
  select
      into status, content
           result.status::int, result.content::text
      FROM extensions.http((
    'DELETE',
    url,
    ARRAY[extensions.http_header('authorization','Bearer '||service_role_key)],
    NULL,
    NULL)::extensions.http_request) as result;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
-- begin
--   insert into public.profiles (id, full_name, avatar_url)
--   values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
--   return new;
-- end;


begin
  insert into public.profiles (id, username)
  values (new.id, new.raw_user_meta_data->>'username');
  return new;
end;
$function$
;

grant delete on table "public"."games" to "anon";

grant insert on table "public"."games" to "anon";

grant references on table "public"."games" to "anon";

grant select on table "public"."games" to "anon";

grant trigger on table "public"."games" to "anon";

grant truncate on table "public"."games" to "anon";

grant update on table "public"."games" to "anon";

grant delete on table "public"."games" to "authenticated";

grant insert on table "public"."games" to "authenticated";

grant references on table "public"."games" to "authenticated";

grant select on table "public"."games" to "authenticated";

grant trigger on table "public"."games" to "authenticated";

grant truncate on table "public"."games" to "authenticated";

grant update on table "public"."games" to "authenticated";

grant delete on table "public"."games" to "service_role";

grant insert on table "public"."games" to "service_role";

grant references on table "public"."games" to "service_role";

grant select on table "public"."games" to "service_role";

grant trigger on table "public"."games" to "service_role";

grant truncate on table "public"."games" to "service_role";

grant update on table "public"."games" to "service_role";

grant delete on table "public"."joined_game" to "anon";

grant insert on table "public"."joined_game" to "anon";

grant references on table "public"."joined_game" to "anon";

grant select on table "public"."joined_game" to "anon";

grant trigger on table "public"."joined_game" to "anon";

grant truncate on table "public"."joined_game" to "anon";

grant update on table "public"."joined_game" to "anon";

grant delete on table "public"."joined_game" to "authenticated";

grant insert on table "public"."joined_game" to "authenticated";

grant references on table "public"."joined_game" to "authenticated";

grant select on table "public"."joined_game" to "authenticated";

grant trigger on table "public"."joined_game" to "authenticated";

grant truncate on table "public"."joined_game" to "authenticated";

grant update on table "public"."joined_game" to "authenticated";

grant delete on table "public"."joined_game" to "service_role";

grant insert on table "public"."joined_game" to "service_role";

grant references on table "public"."joined_game" to "service_role";

grant select on table "public"."joined_game" to "service_role";

grant trigger on table "public"."joined_game" to "service_role";

grant truncate on table "public"."joined_game" to "service_role";

grant update on table "public"."joined_game" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."sports" to "anon";

grant insert on table "public"."sports" to "anon";

grant references on table "public"."sports" to "anon";

grant select on table "public"."sports" to "anon";

grant trigger on table "public"."sports" to "anon";

grant truncate on table "public"."sports" to "anon";

grant update on table "public"."sports" to "anon";

grant delete on table "public"."sports" to "authenticated";

grant insert on table "public"."sports" to "authenticated";

grant references on table "public"."sports" to "authenticated";

grant select on table "public"."sports" to "authenticated";

grant trigger on table "public"."sports" to "authenticated";

grant truncate on table "public"."sports" to "authenticated";

grant update on table "public"."sports" to "authenticated";

grant delete on table "public"."sports" to "service_role";

grant insert on table "public"."sports" to "service_role";

grant references on table "public"."sports" to "service_role";

grant select on table "public"."sports" to "service_role";

grant trigger on table "public"."sports" to "service_role";

grant truncate on table "public"."sports" to "service_role";

grant update on table "public"."sports" to "service_role";

create policy "Enable delete games for game organizers"
on "public"."games"
as permissive
for delete
to public
using ((auth.uid() = organizer_id));


create policy "Enable insert for authenticated users only"
on "public"."games"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."games"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on ownership"
on "public"."games"
as permissive
for update
to public
using ((auth.uid() = organizer_id));


create policy "Public profiles are viewable by everyone."
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "Users can insert their own profile."
on "public"."profiles"
as permissive
for insert
to public
with check ((auth.uid() = id));


create policy "Users can update own profile."
on "public"."profiles"
as permissive
for update
to public
using ((auth.uid() = id));


create policy "Sports are viewable by everyone."
on "public"."sports"
as permissive
for select
to public
using (true);


create policy "Users can delete their own sports."
on "public"."sports"
as permissive
for delete
to public
using ((auth.uid() = user_id));


create policy "Users can insert their own sports."
on "public"."sports"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "Users can update their own sports."
on "public"."sports"
as permissive
for update
to public
using ((auth.uid() = user_id));



